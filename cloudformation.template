{
  "Mappings": {
    "EcsAmiIds": {
      "us-east-1": {"ami": "ami-ecd5e884"}
    }
  },
  "Parameters": {
    "WebsiteApplicationS3Bucket": {
      "Description": "S3 bucket to find application release",
      "Type": "String"
    },
    "WebsiteApplicationS3FileName": {
      "Description": "S3 file name for application file",
      "Type": "String"
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "CacheNodeType": {
      "Description": "ElastiCache instance type",
      "Default": "cache.t1.micro",
      "AllowedValues": [
        "cache.t1.micro"
      ],
      "Type": "String"
    },
    "FrontendAppServerType": {
      "Description": "Application server instance type",
      "Default": "t1.micro",
      "AllowedValues": [
        "t2.micro"
      ],
      "Type": "String"
    },
    "IamRoleInstanceProfile" : {
      "Type" : "String",
      "Description" : "Name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance"
    },
    "EcsClusterName" : {
      "Type": "String",
      "Description": "ECS Cluster Name",
      "Default": "default"
    },
    "AsgMaxSize" : {
      "Type" : "Number",
      "Description" : "Maximum size and initial Desired Capacity of ECS Auto Scaling Group",
      "Default" : "1"
    }
  },
  "Resources": {
    "RootVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true
      }
    },
    "FrontendSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.1.0/26",
        "VpcId": { "Ref": "RootVPC" }
      }
    },
    "MainRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "RootVPC" }
      }
    },
    "FrontendACL": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": { "Ref": "RootVPC" }
      }
    },
    "FrontendACLAssoc": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": { "Ref": "FrontendSubnet1" },
        "NetworkAclId": { "Ref": "FrontendACL" }
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },
    "AttachInternetGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "RootVPC" },
        "InternetGatewayId": { "Ref": "InternetGateway" }
      }
    },
    "InternetRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" },
        "RouteTableId": { "Ref" : "MainRouteTable" }
      }
    },
    "FrontendRouteTableAssoc": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "FrontendSubnet1" },
        "RouteTableId": { "Ref": "MainRouteTable" }
      }
    },
    "FrontendACLPermitHTTPIn": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "FrontendACL" },
        "CidrBlock": "0.0.0.0/0",
        "RuleNumber": 1,
        "RuleAction": "allow",
        "Protocol": 6,
        "Egress": false,
        "PortRange": {
          "From": 80,
          "To": 80
        }
      }
    },
    "FrontendACLPermitEphemeralIn": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "FrontendACL" },
        "CidrBlock": "0.0.0.0/0",
        "RuleNumber": 2,
        "RuleAction": "allow",
        "Protocol": 6,
        "Egress": false,
        "PortRange": {
          "From": 0,
          "To": 65535
        }
      }
    },
    "FrontendACLPermitAllOut": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "FrontendACL" },
        "RuleNumber": 1,
        "RuleAction": "allow",
        "CidrBlock": "0.0.0.0/0",
        "Protocol": 6,
        "Egress": true,
        "PortRange": {
          "From": 0,
          "To": 65535
        }
      }
    },
    "AppServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Permit HTTP access",
        "VpcId": {"Ref": "RootVPC"},
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "HostInstance": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": { "Fn::FindInMap": ["EcsAmiIds", {"Ref": "AWS::Region"}, "ami" ] },
        "InstanceType": { "Ref": "FrontendAppServerType" },
        "AssociatePublicIpAddress": false,
        "IamInstanceProfile": { "Ref": "IamRoleInstanceProfile" },
        "KeyName": { "Ref": "KeyName" },
        "InstanceMonitoring": false,
        "SecurityGroups": [ {"Ref": "AppServerSecurityGroup" } ],
        "UserData": { "Fn::Base64": { "Fn::Join" : ["", [
          "#!/bin/bash\n",
          "echo ECS_CLUSTER=", { "Ref" : "EcsClusterName" }, " >> /etc/ecs/ecs.config"
        ]]}
        }
      }
    },
    "EcsInstanceAsg": {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier": [ { "Ref" : "FrontendSubnet1" } ],
        "MinSize": "0",
        "MaxSize": { "Ref" : "AsgMaxSize" },
        "LaunchConfigurationName": { "Ref": "HostInstance" }
      }
    },
    "CacheSecurityGroup": {
      "Type": "AWS::ElastiCache::SecurityGroup",
      "Properties": {
        "Description": "Lock the cluster down"
      }
    }
  }
}