Mappings:
  EcsAmiIds:
    us-east-1:
      ami: ami-67a3a90d
    us-west-2:
      ami: ami-c7a451a7
Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  CacheNodeType:
    Description: ElastiCache instance type
    Default: cache.t1.micro
    AllowedValues:
    - cache.t1.micro
    Type: String
  DatabaseStorageSize:
    Type: Number
    Description: The allocated storage size specified in gigabytes (GB).
    Default: 5
  RDSInstanceType:
    Type: String
    Description: The name of the compute and memory capacity class of the DB instance.
    Default: db.t1.micro
  FrontendAppServerType:
    Description: Application server instance type
    Default: t1.micro
    Type: String
  EcsClusterName:
    Type: String
    Description: ECS Cluster Name
  AsgMaxSize:
    Type: Number
    Description: Maximum size and initial Desired Capacity of ECS Auto Scaling Group
    Default: '1'
  OriginAccessIdentityID:
    Type: String
    Description: Identity for CloudFront to connect to the static file S3 bucket.
      ID (ex. E1YXXXXXX)
  DatabaseUsername:
    Type: String
    Description: Master username for RDS instance
  DatabasePassword:
    Type: String
    NoEcho: true
    MinLength: 6
    MaxLength: 41
    Description: Master password for RDS instance
  ToProd:
    Type: String
    Default: 'No'
    AllowedValues:
    - 'Yes'
    - 'No'
  DBSnapshotID:
    Type: String
Conditions:
  CreateProdResources:
    Fn::Equals:
    - Ref: ToProd
    - 'Yes'
Resources:
  RootVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
  FrontendSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: 10.0.1.0/26
      VpcId:
        Ref: RootVPC
  FrontendSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: 10.0.1.64/26
      VpcId:
        Ref: RootVPC
  FrontendCacheSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.5.0/26
      VpcId:
        Ref: RootVPC
  RDSSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.10.0/26
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      VpcId:
        Ref: RootVPC
  RDSSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.10.64/26
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: AWS::Region
      VpcId:
        Ref: RootVPC
  MainRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: RootVPC
  InternalRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: RootVPC
  FrontendACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: RootVPC
  FrontendACL1Assoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: FrontendSubnet1
      NetworkAclId:
        Ref: FrontendACL
  FrontendACL2Assoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: FrontendSubnet2
      NetworkAclId:
        Ref: FrontendACL
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: RootVPC
      InternetGatewayId:
        Ref: InternetGateway
  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: MainRouteTable
  Frontend1RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: FrontendSubnet1
      RouteTableId:
        Ref: MainRouteTable
  Frontend2RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: FrontendSubnet2
      RouteTableId:
        Ref: MainRouteTable
  Cache1RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: FrontendCacheSubnet1
      RouteTableId:
        Ref: InternalRouteTable
  RDS1RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: RDSSubnet1
      RouteTableId:
        Ref: InternalRouteTable
  RDS2RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: RDSSubnet2
      RouteTableId:
        Ref: InternalRouteTable
  FrontendACLPermitHTTPIn:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: FrontendACL
      CidrBlock: 0.0.0.0/0
      RuleNumber: 2
      RuleAction: allow
      Protocol: 6
      Egress: false
      PortRange:
        From: 80
        To: 80
  FrontendACLPermitEphemeralIn:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: FrontendACL
      CidrBlock: 0.0.0.0/0
      RuleNumber: 5
      RuleAction: allow
      Protocol: 6
      Egress: false
      PortRange:
        From: 1024
        To: 65535
  FrontendACLPermitEphemeralOut:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: FrontendACL
      RuleNumber: 1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      Protocol: 6
      Egress: true
      PortRange:
        From: 1024
        To: 65535
  FrontendACLPermitHTTPOut:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: FrontendACL
      RuleNumber: 2
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      Protocol: 6
      Egress: true
      PortRange:
        From: 80
        To: 80
  FrontendACLPermitHTTPSOut:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: FrontendACL
      RuleNumber: 3
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      Protocol: 6
      Egress: true
      PortRange:
        From: 443
        To: 443
  AppServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Frontend web application
      VpcId:
        Ref: RootVPC
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS instances
      VpcId:
        Ref: RootVPC
  FrontEndToDbSecurityRule:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateProdResources
    Properties:
      IpProtocol: tcp
      FromPort:
        Fn::GetAtt:
        - RDSInstance
        - Endpoint.Port
      ToPort:
        Fn::GetAtt:
        - RDSInstance
        - Endpoint.Port
      SourceSecurityGroupId:
        Ref: AppServerSecurityGroup
      GroupId:
        Fn::GetAtt:
        - DBSecurityGroup
        - GroupId
  FrontEndToLBToAppSecurityRuleHttp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId:
        Fn::GetAtt:
        - FrontendLBSecurityGroup
        - GroupId
      GroupId:
        Fn::GetAtt:
        - AppServerSecurityGroup
        - GroupId
  FrontEndLBToAppSecurityRuleHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 8443
      ToPort: 8443
      SourceSecurityGroupId:
        Fn::GetAtt:
        - FrontendLBSecurityGroup
        - GroupId
      GroupId:
        Fn::GetAtt:
        - AppServerSecurityGroup
        - GroupId
  AppServerToDBSecurityRule:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: CreateProdResources
    Properties:
      IpProtocol: tcp
      FromPort:
        Fn::GetAtt:
        - RDSInstance
        - Endpoint.Port
      ToPort:
        Fn::GetAtt:
        - RDSInstance
        - Endpoint.Port
      DestinationSecurityGroupId:
        Fn::GetAtt:
        - DBSecurityGroup
        - GroupId
      GroupId:
        Fn::GetAtt:
        - AppServerSecurityGroup
        - GroupId
  StaticFileS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
  CloudFrontS3Permission:
    Type: AWS::S3::BucketPolicy
    DependsOn:
    - StaticFileS3Bucket
    Properties:
      Bucket:
        Ref: StaticFileS3Bucket
      PolicyDocument:
        Statement:
        - Action:
          - s3:GetObject
          Effect: Allow
          Resource:
            !Sub |-
              arn:aws:s3:::${StaticFileS3Bucket}/web_content/*
          Condition:
            Bool:
              aws:SecureTransport: 'true'
          Principal:
            AWS:
              !Sub |-
                arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessIdentityID}
  ExternalCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        CacheBehaviors:
        - TargetOriginId: staticAssetOrigin
          ViewerProtocolPolicy: redirect-to-https
          PathPattern: "/favicon.ico"
          AllowedMethods:
          - HEAD
          - GET
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
            Headers: []
        DefaultCacheBehavior:
          TargetOriginId: staticAssetOrigin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: whitelist
              WhitelistedNames:
              - rack.session
        Enabled: true
        HttpVersion: http2
        Origins:
        - Id: staticAssetOrigin
          DomainName:
            !Sub |-
              ${StaticFileS3Bucket}.s3.amazonaws.com
          OriginPath: /web_content
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Join:
              - ''
              - - origin-access-identity/cloudfront/
                - Ref: OriginAccessIdentityID
        PriceClass: PriceClass_100
        Restrictions:
          GeoRestriction:
            RestrictionType: whitelist
            Locations:
            - US
  HostInstance:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Fn::FindInMap:
        - EcsAmiIds
        - Ref: AWS::Region
        - ami
      InstanceType:
        Ref: FrontendAppServerType
      AssociatePublicIpAddress: false
      KeyName:
        Ref: KeyName
      InstanceMonitoring: false
      IamInstanceProfile:
        Ref: FrontendIAMInstanceRole
      SecurityGroups:
      - Ref: AppServerSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/sh\n"
            - echo ECS_CLUSTER=
            - Ref: EcsClusterName
            - " >> /etc/ecs/ecs.config"
  EcsInstanceAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: CreateProdResources
    Properties:
      VPCZoneIdentifier:
      - Ref: FrontendSubnet1
      MinSize: '0'
      MaxSize:
        Ref: AsgMaxSize
      LaunchConfigurationName:
        Ref: HostInstance
      LoadBalancerNames:
      - Ref: FrontendLoadBalancer
  CacheSecurityGroup:
    Type: AWS::ElastiCache::SecurityGroup
    Properties:
      Description: Lock the cluster down
  FrontendLBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB security group
      VpcId:
        Ref: RootVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        DestinationSecurityGroupId:
          Fn::GetAtt:
          - AppServerSecurityGroup
          - GroupId
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Condition: CreateProdResources
    Properties:
      Engine: postgres
      PubliclyAccessible: false
      DBName: certmanager
      MultiAZ: false
      MasterUsername:
        Ref: DatabaseUsername
      MasterUserPassword:
        Ref: DatabasePassword
      AllocatedStorage:
        Ref: DatabaseStorageSize
      DBInstanceClass:
        Ref: RDSInstanceType
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      VPCSecurityGroups:
      - Ref: DBSecurityGroup
      DBSnapshotIdentifier:
        Ref: DBSnapshotID
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Main data store
      SubnetIds:
      - Ref: RDSSubnet1
      - Ref: RDSSubnet2
  CacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Front-end cache group
      SubnetIds:
      - Ref: FrontendCacheSubnet1
  FrontendLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Condition: CreateProdResources
    Properties:
      Scheme: internet-facing
      Subnets:
      - Ref: FrontendSubnet1
      SecurityGroups:
      - Ref: FrontendLBSecurityGroup
      ConnectionDrainingPolicy:
        Enabled: true
      HealthCheck:
        HealthyThreshold: 5
        Interval: 5
        Target: HTTP:8080/ping
        Timeout: 2
        UnhealthyThreshold: 3
      Listeners:
      - InstancePort: 8080
        InstanceProtocol: HTTP
        LoadBalancerPort: 80
        Protocol: HTTP
  FrontendIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Resource:
              Fn::Join:
              - ":"
              - - arn:aws:ecs
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - cluster/*
            Action:
            - ecs:DeregisterContainerInstance
            - ecs:DiscoverPollEndpoint
            - ecs:Poll
            - ecs:RegisterContainerInstance
            - ecs:Submit*
  AssetUploadUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
      - PolicyName: PermitFileUpload
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:PutObject
            Effect: Allow
            Resource:
              !Sub |-
                arn:aws:s3:::${StaticFileS3Bucket}/web_content/*
            Condition:
              Bool:
                aws:SecureTransport: 'true'
  FrontendIAMInstanceRole:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: FrontendIAMRole
Outputs:
  StaticS3Bucket:
    Description: Stores static content for website
    Value:
      Ref: StaticFileS3Bucket
  URL:
    Description: Raw CloudFront hostname
    Value:
      Fn::GetAtt:
      - ExternalCloudFront
      - DomainName
  WebLoadBalancer:
    Description: Internal ELB for the web frontend
    Condition: CreateProdResources
    Value:
      Fn::GetAtt:
      - FrontendLoadBalancer
      - DNSName
  RDSInstanceUrl:
    Description: Endpoint for the RDS store
    Condition: CreateProdResources
    Value:
      Fn::GetAtt:
      - RDSInstance
      - Endpoint.Address
