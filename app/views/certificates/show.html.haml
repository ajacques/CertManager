%ol.breadcrumb
  = cert_chain_tree(@cert) do |cert|
    - if cert == @cert
      %li{class: 'active'}= cert
    - else
      %li= link_to cert, cert
%h1= @cert.subject.CN
= render partial: 'validity_bar', locals: {cert: @cert.public_key}
%h4 Quick check
%ul
  - if @cert.can_sign?
    %li Can sign other certificates
  - else
    %li Can't sign other certificates
  - if @cert.expired?
    %li Expired
%aside
  %ul
    %li= link_to 'Show certificate (PEM)', format: :pem
    %li #{link_to 'Download chain', chain_certificate_path} #{link_to '(PEM)', chain_certificate_path(format: :pem)}
    - if @cert.private_key
      %li= link_to 'Renew', action: :csr
= render partial: 'validator', locals: {public_key: @cert.public_key}
%h2 Services
- if @cert.services.any?
  %ul
    - @cert.services.each do |service|
      %li= link_to service, service
- else
  %p no services yet. A service allows you to securely deploy this certificate to a host
  = link_to 'Create a service', controller: :services, action: :new, cert_id: @cert.id
%h2 Random Details
%table{class: 'table'}
  %thead
    %tr
      %td Name
      %td Type
  %tbody
    - if @cert.public_key.extended_key_usage
      - @cert.public_key.extended_key_usage.allowed_uses.each do |use|
        %tr
          %td= use.to_s
          %td Extended
    - if @cert.public_key.key_usage
      - @cert.public_key.key_usage.allowed_uses.each do |use|
        %tr
          %td= use.to_s
          %td Basic
%h2 Revocation Lists
#crl-group
  - if @cert.public_key.crl_distribution_points
    %h3 Certificate Revocation Lists
    %h4.group-status
    %ul#crl_list
      - @cert.public_key.crl_distribution_points.uris.each_with_index do |crl, index|
        %li{data: {id: index}}= crl.to_s
  - if @cert.public_key.policy_constraints
    %h2 Policy Constraints
    %table
      - @cert.public_key.policy_constraints.to_h.each do |k,v|
        %tr
          %td= k
          %td= v
- if @cert.public_key.extensions
  %h2 Extensions
  %table
    - @cert.public_key.extensions.each do |k, v|
      %tr
        %td= k
        %td= v
- if @cert.private_key_data.nil?
  %h3 No private key yet, can't use for encryption
- if @cert.private_key_data.present?
  %h3
    Private Key Bit Length:
    = @cert.private_key.bit_length
    bits
%h3 Public Key Bit Length: #{@cert.public_key.bit_length} bits
%pre= (OpenSSL::X509::Certificate.new @cert.public_key.body).to_text
- if @cert.private_key.present? and @cert.signed?
  %p Certificate is ready for deployment